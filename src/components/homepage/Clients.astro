---
import LogoCard from "../ui/LogoCard.astro";

let clientsTop = [
    {
        src: 'breathe-together-yoga',
        name: 'Breath Together Yoga',
    },
    {
        src: 'carolina-yoga-company',
        name: 'Carolina Yoga Company',
    },
    {
        src: 'earth-aerial-yoga',
        name: 'Earth Aerial Yoga',
    },
    {
        src: 'honor-yoga',
        name: 'Honor Yoga',
    },
    {
        src: 'modo-yoga',
        name: 'Modo Yoga',
    },
    {
        src: 'nest-yoga',
        name: 'Nest Yoga',
    },
    {
        src: 'Repose',
        name: 'Repose',
    },
    {
        src: 'shambhala',
        name: 'Shambhala',
    },
    {
        src: 'soul-sweat',
        name: 'Soul Sweat',
    },
    {
        src: 'spark-hot-yoga',
        name: 'Spark Hot Yoga',
    },
];

let clientsBottom = [
    {
        src: 'nest-yoga',
        name: 'Nest Yoga',
    },
    {
        src: 'Repose',
        name: 'Repose',
    },
    {
        src: 'shambhala',
        name: 'Shambhala',
    },
    {
        src: 'soul-sweat',
        name: 'Soul Sweat',
    },
    {
        src: 'spark-hot-yoga',
        name: 'Spark Hot Yoga',
    },
]
---

<section class="py-12">
    <h2 class="text-5xl text-center font-display">Clients</h2>
    <div id="animated-cards" class="mt-8 overflow-hidden">
        <div class="anim-cards js-anim-cards">
            <ul class="anim-cards__list">
                {clientsTop.map((client) => (
                    <li class="anim-cards__item">
                        <LogoCard logo={`/clients/${client.src}.png`} company={client.name} />
                    </li>
                ))}
            </ul>
        </div>

        <!-- <div class="anim-cards anim-cards--reverse js-anim-cards">
            <ul class="anim-cards__list">
                {clientsBottom.map((client) => (
                    <li class="anim-cards__item">
                        <LogoCard logo={`/clients/${client.src}.png`} company={client.name} />
                    </li>
                ))}
            </ul>
        </div> -->
    </div>
</section>

<style>
:root {
  --anim-cards-width: 200px;
  --anim-cards-gap: 1.5rem;
}

@media (min-width: 64rem) {
  :root {
    --anim-cards-gap: 4rem;
  }
}

@supports (--css: variables) {
  @media (min-width: 48rem) {
    :root {
      --anim-cards-width: 185px;
    }
  }
  @media (min-width: 64rem) {
    :root {
      --anim-cards-width: 200px;
    }
  }
}
.anim-cards {
  margin-top: var(--anim-cards-gap);
  margin-bottom: var(--anim-cards-gap);
}

.anim-cards__list {
  display: flex;
  overflow: auto;
}

.anim-cards__item {
  float: left;
  width: var(--anim-cards-width);
  flex-shrink: 0;
  margin-right: var(--anim-cards-gap);
}
.anim-cards:not(.anim-cards--anim-off) .anim-cards__list {
  overflow: visible;
  will-change: transform;
  transform: translateZ(0);
  backface-visibility: hidden;
}
.anim-cards--reverse:not(.anim-cards--anim-off) .anim-cards__list {
  flex-direction: row-reverse;
}


</style>

<script>
(function () {
    var AnimCards = function (element) {
        this.element = element;
        this.list = this.element.getElementsByTagName('ul')[0];
        this.cards = this.list.children;
        this.reverseDirection = Util.hasClass(this.element, 'anim-cards--reverse');
        this.translate = 0; // store container translate value
        this.animationId = false;
        this.animating = false;
        this.paused = false;
        // change speed of animation
        this.animationSpeed = 1.25; // > 1 to increse speed, < 1 to reduce; always > 0
        initAnimCardsEvents(this);
    };

    function initAnimCardsEvents(cards) {
        // init observer
        var observer = new IntersectionObserver(animCardsObserve.bind(cards));
        observer.observe(cards.element);

        cards.element.addEventListener('update-card-width', function (event) {
            // reset animation on resize
            if (cards.animating) {
                cancelPrevAnimation(cards);
                if (!cards.paused) initAnimCards(cards);
            }
        });
    }

    function animCardsObserve(entries) {
        if (entries[0].isIntersecting) {
            this.animating = true;
            if (!this.paused) initAnimCards(this); // init animation
        } else {
            this.animating = false;
            cancelPrevAnimation(this);
        }
    }

    function initAnimCards(cards) {
        if (cards.paused) return;
        cards.cardWidth = getAnimCardsWidth(cards);
        cards.animationId = window.requestAnimationFrame(triggerAnimCards.bind(cards));
    }

    function triggerAnimCards(timestamp) {
        cancelPrevAnimation(this);
        if (!this.timestamp) this.timestamp = timestamp;
        var translateIncrease = (this.timestamp - timestamp) * 0.06 * this.animationSpeed;
        this.timestamp = timestamp;
        updateAnimCardsTranslate(this, translateIncrease);
        updateAnimCardsList(this);
        setTranslate(this);
        this.animationId = window.requestAnimationFrame(triggerAnimCards.bind(this));
    }

    function updateAnimCardsTranslate(cards, translate) {
        cards.translate = cards.reverseDirection
            ? cards.translate - translate
            : cards.translate + translate;
        cards.translate = Math.round(Math.abs(cards.translate));
        if (!cards.reverseDirection) cards.translate = cards.translate * -1;
    }

    function updateAnimCardsList(cards) {
        if (Math.abs(cards.translate) <= cards.cardWidth) return;
        // need to remove first item from the list and append it to the end of list
        cards.translate = Math.abs(cards.translate) - cards.cardWidth;
        if (!cards.reverseDirection) cards.translate = cards.translate * -1;
        var clone = cards.cards[0].cloneNode(true);
        cards.list.removeChild(cards.cards[0]);
        cards.list.appendChild(clone);
    }

    function setTranslate(cards) {
        cards.list.style.transform = 'translateX(' + cards.translate + 'px)';
        cards.list.style.msTransform = 'translateX(' + cards.translate + 'px)';
    }

    function getAnimCardsWidth(cards) {
        return (
            parseFloat(window.getComputedStyle(cards.cards[0]).marginRight) +
            cards.cards[0].offsetWidth
        );
    }

    function cancelPrevAnimation(cards) {
        if (cards.animationId) {
            window.cancelAnimationFrame(cards.animationId);
            cards.animationId = false;
        }
    }

    //initialize the AnimCards objects
    var animCards = document.getElementsByClassName('js-anim-cards'),
        requestAnimationFrameSupported = window.requestAnimationFrame,
        reducedMotion = Util.osHasReducedMotion(),
        intersectionObserverSupported =
            'IntersectionObserver' in window &&
            'IntersectionObserverEntry' in window &&
            'intersectionRatio' in window.IntersectionObserverEntry.prototype;

    if (animCards.length > 0) {
        var animCardsArray = [];
        for (var i = 0; i < animCards.length; i++) {
            if (
                !requestAnimationFrameSupported ||
                reducedMotion ||
                !intersectionObserverSupported
            ) {
                // animation is off if requestAnimationFrame/IntersectionObserver is not supported or reduced motion is on
                Util.addClass(animCards[i], 'anim-cards--anim-off');
            } else {
                (function (i) {
                    animCardsArray.push(new AnimCards(animCards[i]));
                })(i);
            }
        }
    }
})();
</script>
